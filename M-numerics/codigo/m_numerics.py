# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graphic_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from colorama import init, Fore, Back, Style
init(convert=True)
from PyQt5.QtWidgets import (QTableWidget,QTableWidgetItem, QAbstractItemView)
from tabulate import tabulate
from mplwidget import MplWidget
import uno

import math
import sys
import numpy as np
import random

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(750, 500)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(-240, 170, 120, 80))
        self.widget.setObjectName("widget")
        self.MplWidget = MplWidget(self.centralwidget)
        self.MplWidget.setGeometry(QtCore.QRect(0, 0, 751, 501))
        self.MplWidget.setObjectName("MplWidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "GRÁFICA"))
from mplwidget import MplWidget
def menu():
    while True:
        print( Fore.RED + """\
        ███▄ ▄███▓ ███▄    █  █    ██  ███▄ ▄███▓▓█████  ██▀███   ██▓ ▄████▄    ██████ 
        ▓██▒▀█▀ ██▒ ██ ▀█   █  ██  ▓██▒▓██▒▀█▀ ██▒▓█   ▀ ▓██ ▒ ██▒▓██▒▒██▀ ▀█  ▒██    ▒ 
        ▓██    ▓██░▓██  ▀█ ██▒▓██  ▒██░▓██    ▓██░▒███   ▓██ ░▄█ ▒▒██▒▒▓█    ▄ ░ ▓██▄   
        ▒██    ▒██ ▓██▒  ▐▌██▒▓▓█  ░██░▒██    ▒██ ▒▓█  ▄ ▒██▀▀█▄  ░██░▒▓▓▄ ▄██▒  ▒   ██▒
        ▒██▒   ░██▒▒██░   ▓██░▒▒█████▓ ▒██▒   ░██▒░▒████▒░██▓ ▒██▒░██░▒ ▓███▀ ░▒██████▒▒
        ░ ▒░   ░  ░░ ▒░   ▒ ▒ ░▒▓▒ ▒ ▒ ░ ▒░   ░  ░░░ ▒░ ░░ ▒▓ ░▒▓░░▓  ░ ░▒ ▒  ░▒ ▒▓▒ ▒ ░
        ░  ░      ░░ ░░   ░ ▒░░░▒░ ░ ░ ░  ░      ░ ░ ░  ░  ░▒ ░ ▒░ ▒ ░  ░  ▒   ░ ░▒  ░ ░
        ░      ░      ░   ░ ░  ░░░ ░ ░ ░      ░      ░     ░░   ░  ▒ ░░        ░  ░  ░  
            ░            ░    ░            ░      ░  ░   ░      ░  ░ ░            ░  
                                                                    ░                 """)
        
        table = [["Diferencias Divididas",1],["Minimos Cuadrados",2],["Polinomios de Lagrange",3],["Posicion Falsa",4],["Runge Kutta 2do Orden",5],["Runge Kutta 4to Orden",6],["Biseccion",7],["Newton Rapson",8],["Secante",9],["Punto Fijo",10],["Euler",11],["Euler Mejorado",12],["CERRAR APLICACIÓN",0]]
        headers = ["METODO", "INDICE"]
        print(Fore.GREEN + tabulate(table, headers, tablefmt="fancy_grid"))
        while True:
            try:
                print(Fore.WHITE + "--<>--<>")
                op =int(input( "INDICE: "))
                print(Fore.WHITE + "--<>--<>")
                if op >= 0  and op < 14:
                    break
                else:
                    print(Fore.RED + "O P C I Ó N   N O   V A L I D A")
            except ValueError:
                print(Fore.RED + "O P C I Ó N   N O   V A L I D A")
        if op == 1 :
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<>--<>--<>--<>-")
            print(Fore.YELLOW + "D I F E R E N C I A S  D I V I D I D A S")
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<>--<>--<>--<>-")
            uno.divided_differences()
        elif op == 2:
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<>--<>-")
            print(Fore.YELLOW + "M I N I M O S  C U A D R A D O S")
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<>--<>-")
            uno.minimum_squares()
        elif op == 3:
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<>--<>--<>--<>--")
            print(Fore.YELLOW + "P O L I N O M I O S  D E  L A G R A N G E")
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<>--<>--<>--<>--")
            uno.lagrangeM()
        elif op == 4:
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<")
            print(Fore.YELLOW + "P O S I C I O N  F A L S A")
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<")
            uno.fake_position()     
        elif op == 5:
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<>--<>--<>--<")
            print(Fore.YELLOW + "R U N G E  K U T T A  2 D O  O R D E N")
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<>--<>--<>--<")
            uno.RK()
        elif op == 6:
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<>--<>--<>--<")
            print(Fore.YELLOW + "R U N G E  K U T T A  4 T O  O R D E N")
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<>--<>--<>--<")
            uno.RKcuarto()       
        elif op == 7:
            print(Fore.WHITE + "--<>--<>--<>--<>--")
            print(Fore.YELLOW + "B I S E C C I O N")
            print(Fore.WHITE + "--<>--<>--<>--<>--")
            uno.bis()   
        elif op == 8:
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>-")
            print(Fore.YELLOW + "N E W T O N  R A P S O N")
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>-")
            uno.newton()
        elif op == 9:
            print(Fore.WHITE + "--<>--<>--<>--")
            print(Fore.YELLOW + "S E C A N T E")
            print(Fore.WHITE + "--<>--<>--<>--")
            uno.secant()
        elif op == 10:
            print(Fore.WHITE + "--<>--<>--<>--<>--<")
            print(Fore.YELLOW + "P U N T O  F I J O")
            print(Fore.WHITE + "--<>--<>--<>--<>--<")
            uno.static_point()
        elif op == 11 :
            print(Fore.WHITE + "--<>--<>--")
            print(Fore.YELLOW + "E U L E R")
            print(Fore.WHITE + "--<>--<>--")
            uno.euler()
        elif op == 12 :
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<>")
            print(Fore.YELLOW + "E U L E R  M E J O R A D O ")
            print(Fore.WHITE + "--<>--<>--<>--<>--<>--<>--<>")
            uno.euler()
        else:
            break

if __name__ == "__main__":
    menu()
